Sweeper game design

Describe the the playing process
A user clicked randomly on the any cell of the field. At the same time, the time counter will start to count time. If it is not a mine, the field will open an area around this click point. If it is a mine, game is over. Then the user will continue click on cell. The user will mark the cell as flag. If the cells is marked as a flag, the mine counter will decrease by 1. If the game is over at middle, the user cannot click on cells anymore. All mines will be shown on the field with the mined marked correctly shown with a X??. And the smiley face turns to a sad face. If all the mines were find out, the game will stop and it will pop up with a sentence saying congratulations. 



User cases

New game
The user opens a new game and choose the size of the board.

	Choose difficulty level

2. The user chooses the size of the board to determine game difficulty level


Minesweeping
If the user feels that it is not mine, left  click to check the result 
If the user is correct, the board will show the mine information around the clicked cell(either empty or with numbers).
If the user clicked on a mine, the game is over.
The time counter starts to count seconds after the first click of the user
If the user feels that it is a mine, the user right clicks the cell to mark it using a flag.
The number of mines will decrease by 1 after user flagged the cell.

Winning a game
If the user finished sweeping all the mines(marked number of flags equals to the numbers of mine and marked them correctly), the user wins the game.
If the user didn’t marked all mines correctly, there are still mines left, continue mine sweeping step 1.

Asking for help
The user clicks help button and a tutorial of the game shows

About
The user clicks the About button and the information about About shows up.

Left-click mouse
Open cell
Check if it is a mine cell.
If it’s a mine - end game.
If it’s not a mine, check the number of unopened cells.
if its equal to number of mines - user won. 
If there are more unopened cells than number of mines, display the number of adjacent mines.
If there are no adjacent mines - open surrounding cells.
Right-click mouse
Check if this cell already has a flag.
If it doesn’t have a flag, display flag and mark cell as flagged so it cannot be opened.
If it has flag, remove flag and mark that cell doesn’t have a flag.
New-game button click
Generate new field.
Refresh timer and mines counter.

















Game
Contains  the board
Board
Display timer
Timer
Display mine counter
Mine Counter
Get the difficulty level of the game from the input


Get the input for left click(mine or new area)


Get the input for flagging






Class: Board
Responsibilities
Collaborators
Store cells
Mine Cell
Respond to user’s click to change the cell
Empty Cell
Display the rest of the mines and the one the user clicked incorrectly and the game is over
Timer


Mine Counter



Possible for cell class:
Super class: Cell
Subclass1: MineCell 
Subclass2: EmptyCell
Parent: Cell
Store status of visibility


Change the status correspondingly after receiving clicking information from the user


Store status of flag





MineCell
Ends the game once visible
Board


User












EmptyCell
Store the number of mines around it (default = 0)
Board


User















Timer
increase by 1 second
Board
Display time elapsed


Stop timing when the game fails










MineCounter
Display number of mine
Board
Decrease by 1 once a cell’s status change to flag
Cell







































MineSweeper
Board
MineField
MineCounter
Timer
Cells




Int NROW
Int NCOL






Setup
Reset




init_field)_
calc_nearMine(x,y)
openView(x,y)
reset()




isMine()
isFlag()
isOpen()
clear()
display()

Play
MineSweeperTester
















Keyboard_input()
mouse_click()
main()
MineSweeperTester() {
 main() {
  While (true) {
  R = Input (mouse click)
   If (r == mine)
      game_over()
 } else { 
  // keep getting user input
}
  } 
}










